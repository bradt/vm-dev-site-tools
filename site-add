#!/bin/bash

if [ $# -lt 1 ]; then
	echo 'Usage: site-add <domain> [<db_name>]'
	exit
fi

DOMAIN=$1

if [ $# -eq 1 ]; then
	DB_NAME=$(echo $DOMAIN | cut -f1 -d".")
else
	DB_NAME=$2
fi

if [ ${#DB_NAME} -gt 16 ]; then
	read -p "The database name $DB_NAME is too long. Another name? " DB_NAME
fi

mkdir $DOMAIN
cd $DOMAIN

mkdir logs
mkdir public
cd public

DB_PASSWORD=$(openssl rand -base64 32)
WEBROOT=$(pwd)

echo -n "Creating database..."

mysql -u root --password=root -e "CREATE USER '$DB_NAME'@'localhost' IDENTIFIED BY '$DB_PASSWORD';"
mysql -u root --password=root -e "CREATE DATABASE $DB_NAME;"
mysql -u root --password=root -e "GRANT ALL ON $DB_NAME.* TO '$DB_NAME'@'localhost'; FLUSH PRIVILEGES;"

echo "done."

echo "DB Password: $DB_PASSWORD"

wp core download

wp config create --dbname=$DB_NAME --dbuser=$DB_NAME --dbpass=$DB_PASSWORD

cd /etc/nginx/ssl

sudo openssl genrsa -out $DOMAIN.key 2048

sudo openssl req -new -key $DOMAIN.key -out $DOMAIN.csr

sudo sh -c "cat > $DOMAIN.ext" <<- EOM
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = $DOMAIN
DNS.2 = $DOMAIN.192.168.1.10.xip.io

EOM

sudo openssl x509 -req -in $DOMAIN.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial \
-out $DOMAIN.crt -days 1825 -sha256 -extfile $DOMAIN.ext

sudo rm $DOMAIN.ext

cd ..

sudo sh -c "cat > sites-available/$DOMAIN" <<- EOM
server {
	listen 443 ssl http2;
	server_name $DOMAIN;
	root $WEBROOT;

	ssl_certificate /etc/nginx/ssl/$DOMAIN.crt;
	ssl_certificate_key /etc/nginx/ssl/$DOMAIN.key;

	index index.php;

	access_log /mnt/hgfs/www/$DOMAIN/logs/access.log;
	error_log /mnt/hgfs/www/$DOMAIN/logs/error.log;

	include global/server/defaults.conf;
	include global/server/ssl.conf;

	location / {
		try_files \$uri \$uri/ /index.php?\$args;
	}

	location ~ \\.php\$ {
		try_files \$uri =404;
		include global/fastcgi-params.conf;
		fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	}
}

server {
	listen 80;
	server_name $DOMAIN; 

	return 301 https://$DOMAIN$request_uri;
}

EOM

sudo ln -s /etc/nginx/sites-available/$DOMAIN sites-enabled/$DOMAIN

sudo service nginx reload
